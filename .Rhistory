unemployed_datatbl[, mean(rate), by = format(date, '%Y')]
# UPSAMPLING
# irregular time series
all_dates <- seq(from = unemployed_datatbl$date[1], to = tail(unemployed_datatbl$date, 1),
by = 'months')
rand_unemp_databl <- rand_unemp_databl[J(all_dates), roll = 0]
J
J(all_dates)
# UPSAMPLING
# irregular time series
all_dates <- seq(from = unemployed_datatbl$date[1], to = tail(unemployed_datatbl$date, 1),
by = 'months')
rand_unemp_databl <- rand_unemp_databl[J(all_dates), roll = 0]
rand_unemp_databl = rand_unemp_databl[J(all_dates), roll = 0]
j(all_dates)
rand_unemp_databl <- rand_unemp_databl[J(all_dates, on = 'date'), roll = 0]
# exponential_moving_average_example.r
x <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
plot(x)
plot(x, type = 'l')
plot(x, type = 'lp')
plot(x, 'b')
plot(x, 'b')
plot(x, type = 'b')
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- funtion(r) {
s <- 0
list(
update = function(x) {
s <<- r * s + (1 - r) * x
}
)
}
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- funtion(r) {
s <- 0
list(
update = function(x) {
s <<- r * s + (1 - r) * x
}
)
}
s <- 0
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- funtion(r) {
s <- 0
return(
list(update = function(x) {s <- r * s + (1 - r) * x})
)
}
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
make.ema0 <- function (r) {
s <- 0
list(
update=function (x) {
s <<- r*s + (1-r)*x
}
)
}
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- function (r) {
s <- 0
list(
update=function (x) {
s <<- r*s + (1-r)*x
}
)
}
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- function (r) {
s <- 0
list(
update=function (x) {
s <<- r * s + (1 - r) * x
}
)
}
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- function (r) {
s <- 0
list(
update = function (x) {
s <<- r * s + (1 - r) * x
}
)
}
m0 <- ema_ord_0(0.7)
for (i in 1:length(x)) {
y0[i] <- m0$update(x[i])
}
y0 <- list()
for (i in 1:length(x)) {
y0[i] <- m0$update(x[i])
}
plot(x, y0)
plot(x, type = 'b')
ggplot() +
geom_point(data = x)
x[1] <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
x[[1]] <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
x <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
x
y0
y0 <- c()
for (i in 1:length(x)) {
y0[i] <- m0$update(x[i])
}
x
y0
plot(x, y0)
plot(c(x, y0))
plot(c(x, y0), type = 'b')
matrix(x, y0)
matrix(x)
matrix(c(x, y0))
matrix(,c(x, y0))
matrix(,c(x, y0))
matrix(c(x, y0))
matrix(c(x, y0),)
matrix()
x <- tibble(x)
View(x)
View(x)
exp <- x %>%
mutate(y = y0)
View(exp)
View(exp)
ggplot(data = exp) +
geom_polygon(aes(y = x))
x <- x %>%
mutate(id = seq(1:16))
plot(x, type = 'b')
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- function (r) {
s <- 0
list(
update = function (x) {
s <<- r * s + (1 - r) * x
}
)
}
m0 <- ema_ord_0(0.7)
y0 <- c()
for (i in 1:length(x)) {
y0[i] <- m0$update(x[i])
}
exp <- x %>%
mutate(y = y0)
# exponential_moving_average_example.r
# The EMA is a very handy tool. It lets us calculate an average over
# recent data. But, unlike a Simple Moving Average, we don't
# have to keep a window of samples around—we can update an
# EMA "online," one sample at a time
# But the perennial question is: how do you start an EMA?
# First, here are a couple of wrong ways.
# Let's assume that we have incoming data that looks like this:
x <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
x <- tibble(x)
x <- x %>%
mutate(id = seq(1:16))
plot(x, type = 'b')
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- function (r) {
s <- 0
list(
update = function (x) {
s <<- r * s + (1 - r) * x
}
)
}
m0 <- ema_ord_0(0.7)
y0 <- c()
for (i in 1:length(x)) {
y0[i] <- m0$update(x[i])
}
exp <- x %>%
mutate(y = y0)
x <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
exp <- tibble(x)
exp <- exp %>%
mutate(id = seq(1:16))
plot(x, type = 'b')
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- function (r) {
s <- 0
list(
update = function (x) {
s <<- r * s + (1 - r) * x
}
)
}
m0 <- ema_ord_0(0.7)
y0 <- c()
m0 <- ema_ord_0(0.7)
y0 <- c()
for (i in 1:length(exp$x)) {
y0[i] <- m0$update(exp$x[i])
}
exp <- x %>%
mutate(y = y0)
exp <- exp %>%
mutate(y = y0)
ggplot(data = exp) +
geom_polygon(aes(,y = x))
View(exp)
id <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
x <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
exp <- tibble(id, x)
exp <- exp %>%
mutate(id = seq(1:16))
id <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
x <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
exp <- tibble(id, x)
exp <- exp %>%
plot(x, type = 'b')
id <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
x <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
exp <- tibble(id, x)
View(exp)
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- function (r) {
s <- 0
list(
update = function (x) {
s <<- r * s + (1 - r) * x
}
)
}
m0 <- ema_ord_0(0.7)
y0 <- c()
for (i in 1:length(exp$x)) {
y0[i] <- m0$update(exp$x[i])
}
exp <- exp %>%
mutate(y = y0)
ggplot(data = exp) +
geom_polygon(aes(x = id, y = x))
ggplot(data = exp) +
geom_point(aes(x = id, y = x))
ggplot(data = exp) +
geom_point(aes(x = id, y = x)) +
geom_line(aes(x = id y = x))
ggplot(data = exp) +
geom_point(aes(x = id, y = x)) +
geom_line(aes(x = id,  y = x))
ggplot(data = exp) +
geom_point(aes(x = id, y = x)) +
geom_line(aes(x = id, y = x)) +
geom_point(aes(x = id, y = y0), color = 'red') +
geom_line(aes(x = id, y = y0), color = 'red')
# The common alternative is to take the first sample as the
# initial value for the EMA. Code for that looks like:
ema_ord_1 <- function(r) {
started <- FALSE
s <- NULL
list(
update = function(x) {
if (!started) {
started <<- TRUE
s <<- x
}
else {
s <<- r * s + (1 - r) * x
}
}
)
}
m1 <- ema_ord_1(0.7)
exp %>%
mutate(y1 = m1$update(x))
m1 <- Vectorize(m1)
exp %>%
mutate(y1 = m1$update(x))
m1 <- Vectorize(m1)
ema_ord_1 <- Vectorize(ema_ord_1)
m1 <- ema_ord_1(0.7)
exp %>%
mutate(y1 = m1$update(x))
m1 <- ema_ord_1(0.7)
y1[i] <- m1$udate(exp$x[i])
for (i in 1:length(exp)) {
y1[i] <- m1$udate(exp$x[i])
}
for (i in 1:length(exp)) {
y1[i] <- m1$update(exp$x[i])
}
y1 <- c()
for (i in 1:length(exp)) {
y1[i] <- m1$update(exp$x[i])
}
exp <-
exp %>%
mutate(y1 = y1)
# exponential_moving_average_example.r
# The EMA is a very handy tool. It lets us calculate an average over
# recent data. But, unlike a Simple Moving Average, we don't
# have to keep a window of samples around—we can update an
# EMA "online," one sample at a time
# But the perennial question is: how do you start an EMA?
# First, here are a couple of wrong ways.
# Let's assume that we have incoming data that looks like this:
id <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
x <- c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
exp <- tibble(id, x)
# The most straight-forward way to start an EMA is
# to simply let it take on some arbitrary constant (usually 0) as
# its initial value. This means the first values that the
# EMA returns will be biased towards this constant, and we have
# to feed in enough samples to "warm it up" before we can get
# decent numbers out.
ema_ord_0 <- function (r) {
s <- 0
list(
update = function (x) {
s <<- r * s + (1 - r) * x
}
)
}
m0 <- ema_ord_0(0.7)
y0 <- c()
for (i in 1:length(exp$x)) {
y0[i] <- m0$update(exp$x[i])
}
exp <- exp %>%
mutate(y = y0)
# plotting original and ord0 smoothing
ggplot(data = exp) +
geom_point(aes(x = id, y = x)) +
geom_line(aes(x = id, y = x)) +
geom_point(aes(x = id, y = y0), color = 'red') +
geom_line(aes(x = id, y = y0), color = 'red')
# The common alternative is to take the first sample as the
# initial value for the EMA. Code for that looks like:
ema_ord_1 <- function(r) {
started <- FALSE
s <- NULL
list(
update = function(x) {
if (!started) {
started <<- TRUE
s <<- x
}
else {
s <<- r * s + (1 - r) * x
}
}
)
}
m1 <- ema_ord_1(0.7)
y1 <- c()
for (i in 1:length(exp)) {
y1[i] <- m1$update(exp$x[i])
}
exp <-
exp %>%
mutate(y1 = y1)
y1
for (i in 1:length(x)) {
y1[i] <- m1$update(exp$x[i])
}
exp <-
exp %>%
mutate(y1 = y1)
View(exp)
ggplot(data = exp) +
geom_point(aes(x = id, y = x)) +
geom_line(aes(x = id, y = x)) +
geom_point(aes(x = id, y = y0), color = 'red') +
geom_line(aes(x = id, y = y0), color = 'red') +
geom_point(aes(x = id, y = y1), color = 'green') +
geom_point(aes(x = id, y = y1), color = 'green')
ggplot(data = exp) +
geom_point(aes(x = id, y = x)) +
geom_line(aes(x = id, y = x)) +
geom_point(aes(x = id, y = y0), color = 'red') +
geom_line(aes(x = id, y = y0), color = 'red') +
geom_point(aes(x = id, y = y1), color = 'green') +
geom_line(aes(x = id, y = y1), color = 'green')
ema_ord_correct <- function(r) {
s <- 0
extra <- 1
list(
update = function(x) {
s <<- r * s + (1 - r) * x
extra <<- r * extra
s / (1 - extra)
}
)
}
m2 <- ema_ord_correct(0.7)
y2 <- c()
y2[i] <- m2$update(exp$x[i])
for (i in 1:length(x)) {
y2[i] <- m2$update(exp$x[i])
}
exp <-
exp %>%
mutate(y2 = y2)
ggplot(data = exp) +
geom_point(aes(x = id, y = x)) +
geom_line(aes(x = id, y = x)) +
geom_point(aes(x = id, y = y0), color = 'red') +
geom_line(aes(x = id, y = y0), color = 'red') +
geom_point(aes(x = id, y = y1), color = 'green') +
geom_line(aes(x = id, y = y1), color = 'green') +
geom_point(aes(x = id, y = y2), color = 'blue') +
geom_line(aes(x = id, y = y2), color = 'blue')
m2 <- ema_ord_correct(0.5)
y2 <- c()
for (i in 1:length(x)) {
y2[i] <- m2$update(exp$x[i])
}
exp <-
exp %>%
mutate(y2 = y2)
ggplot(data = exp) +
geom_point(aes(x = id, y = x)) +
geom_line(aes(x = id, y = x)) +
geom_point(aes(x = id, y = y0), color = 'red') +
geom_line(aes(x = id, y = y0), color = 'red') +
geom_point(aes(x = id, y = y1), color = 'green') +
geom_line(aes(x = id, y = y1), color = 'green') +
geom_point(aes(x = id, y = y2), color = 'blue') +
geom_line(aes(x = id, y = y2), color = 'blue')
ema_ord_correct <- function(r) {
s <- 0
extra <- 1
list(
update = function(x) {
s <<- r * s + (1 - r) * x
extra <<- r * extra
s / (1 - extra)
}
)
}
m2 <- ema_ord_correct(0.5)
y2 <- c()
for (i in 1:length(x)) {
y2[i] <- m2$update(exp$x[i])
}
exp <-
exp %>%
mutate(y2 = y2)
ggplot(data = exp) +
geom_point(aes(x = id, y = x)) +
geom_line(aes(x = id, y = x)) +
geom_point(aes(x = id, y = y0), color = 'red') +
geom_line(aes(x = id, y = y0), color = 'red') +
geom_point(aes(x = id, y = y1), color = 'green') +
geom_line(aes(x = id, y = y1), color = 'green') +
geom_point(aes(x = id, y = y2), color = 'blue') +
geom_line(aes(x = id, y = y2), color = 'blue')
AirPassengers
View(rand_unemp_databl)
AirPassengers
# airpassangers.r
plot(stl(AirPassengers, 'periodic'))
